openapi: 3.0.0
info:
  title: API d'Authentification des Utilisateurs
  description: |
    Cette API gère l'authentification des utilisateurs et la gestion des tokens JWT. 
    Elle fournit des endpoints pour la connexion des utilisateurs, la création de nouveaux utilisateurs, et la validation des tokens JWT.
  version: 1.0.0
servers:
  - url: /R401/r401-Auth/api
    description: Serveur de développement
paths:
  /endpoint.php:
    post:
      summary: Authentifier un utilisateur et générer un token JWT
      description: |
        Authentifie un utilisateur en vérifiant son nom d'utilisateur et son mot de passe. 
        Si les informations sont valides, un token JWT est généré.
      tags:
        - Authentification
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  description: Le nom d'utilisateur.
                password:
                  type: string
                  description: Le mot de passe.
              required:
                - username
                - password
      responses:
        '200':
          description: Utilisateur authentifié avec succès. Retourne le token JWT.
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    description: Le token JWT généré.
        '400':
          description: Erreur d'identification ou requête invalide.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Créer un nouvel utilisateur
      description: |
        Crée un nouvel utilisateur avec un nom d'utilisateur et un mot de passe fournis.
      tags:
        - Authentification
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  description: Le nom d'utilisateur pour le nouvel utilisateur.
                password:
                  type: string
                  description: Le mot de passe pour le nouvel utilisateur.
              required:
                - username
                - password
      responses:
        '201':
          description: Utilisateur créé avec succès.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserCreated'
        '400':
          description: Erreur lors de la création de l'utilisateur ou requête invalide.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    get:
      summary: Valider un token JWT
      description: |
        Valide le token JWT fourni dans l'en-tête Authorization.
      tags:
        - Authentification
      parameters:
        - in: header
          name: Authorization
          required: true
          schema:
            type: string
          description: Token JWT au format Bearer.
      responses:
        '200':
          description: Le token est valide.
        '400':
          description: Token invalide ou expiré.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Error:
      type: object
      properties:
        status_code:
          type: integer
          description: Code d'erreur HTTP.
        status:
          type: string
          description: Message d'erreur.
        data:
          type: string
          nullable: true
          description: Données supplémentaires (si disponibles).
      required:
        - status_code
        - status
    UserCreated:
      type: object
      properties:
        status_code:
          type: integer
          description: Code de succès HTTP.
        status:
          type: string
          description: Message de succès.
      required:
        - status_code
        - status